testPlainArrayWorks
<<<<<<<
print_r(['foo', 'bar']);
=======
Array
(
    [0] => foo
    [1] => bar
)
>>>>>>>

testSimpleSpreadInsertsEveryArrayEntryIntoParentArrayOnAssign
<<<<<<<
$oldArr = ['baz'];
$arr = ['foo', ...$oldArr, 'bar'];
print_r($arr);
=======
Array
(
    [0] => foo
    [1] => baz
    [2] => bar
)
>>>>>>>

testSimpleSpreadInsertsEveryArrayEntryIntoParentArrayOnNoAssign
<<<<<<<
$oldArr = ['baz'];
print_r(['foo', ...$oldArr, 'bar']);
=======
Array
(
    [0] => foo
    [1] => baz
    [2] => bar
)
>>>>>>>

testMultipleSimpleSpreadsGetReplacedInTheRightOrder
<<<<<<<
$bar = ['bar'];
$baz = ['baz'];
print_r(['foo', ...$bar, 'foo', ...$baz]);
=======
Array
(
    [0] => foo
    [1] => bar
    [2] => foo
    [3] => baz
)
>>>>>>>

testSpreadNestedArrayPreserveInnerArray
<<<<<<<
$bar = [['bar']];
print_r(['foo', ...$bar]);
=======
Array
(
    [0] => foo
    [1] => Array
        (
            [0] => bar
        )

)
>>>>>>>

testSpreadsInAllVariantsGetReplacedCorrectly
<<<<<<<
function getIds()
{
    return [3,4,5];
}

class Provider
{
    public function getNames(): array { return ['Pascal', 'Philipp']; }

    public static function getOtherNames(): array { return ['Cassandra']; }
}
// Results in array: ['foo', 'hello', 'my', 'world', 3, 4, 5, 'bar', 'baz']
$crazy = ['my'];
$otherItems = ['hello', ...$crazy, 'world'];
$otherItems2 = ['baz'];
$nested = [['nested' => 'even this']];

$provider = new Provider();

$items = [
	'I' => 'foo',
	...$otherItems,
	...([...$crazy, 'am' => 'meow', ...getIds(), ...$provider->getNames()]),
	'awesome' => 'bar',
	...$otherItems2,
	...Provider::getOtherNames(),
	...$nested
];
print_r($items);
=======
Array
(
    [I] => foo
    [0] => hello
    [1] => my
    [2] => world
    [3] => my
    [am] => meow
    [4] => 3
    [5] => 4
    [6] => 5
    [7] => Pascal
    [8] => Philipp
    [awesome] => bar
    [9] => baz
    [10] => Cassandra
    [11] => Array
        (
            [nested] => even this
        )

)
>>>>>>>

testDoesNotInjectThisIntoClosure
<<<<<<<
class Provider2
{
	private $someOtherNames = ['John'];

    public function getNames(): array { return ['Pascal', ...$this->someOtherNames, 'Philipp']; }
}

print_r((new Provider2)->getNames());
=======
Array
(
    [0] => Pascal
    [1] => John
    [2] => Philipp
)
>>>>>>>