<?php

namespace Phx\Parser;

use PhpParser\Error;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar files grammar/php5.y or grammar/php7.y
 *  * the skeleton file grammar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Phx extends \PhpParser\ParserAbstract
{
    protected $tokenToSymbolMapSize = 393;
    protected $actionTableSize = 905;
    protected $gotoTableSize = 449;

    protected $invalidSymbol = 158;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 336;
    protected $YYNLSTATES   = 585;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "T_IN",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'`'",
        "']'",
        "'\"'",
        "'$'"
    );

    protected $tokenToSymbol = array(
            0,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,   53,  156,  158,  157,   52,   35,  158,
          152,  153,   50,   47,    7,   48,   49,   51,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,   29,  149,
           41,   15,   43,   28,   65,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,   67,  158,  155,   34,  158,  154,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  150,   33,  151,   55,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
          158,  158,  158,  158,  158,  158,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   13,   14,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   30,   31,   32,   36,   37,   38,   39,   40,   42,
           44,   45,   46,   54,   56,   57,   58,   59,   60,   61,
           62,   63,   64,   66,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,   78,   79,   80,   81,  158,  158,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  135,  136,  137,  158,  158,  158,  158,
          158,  158,  138,  139,  140,  141,  142,  143,  144,  145,
          146,  147,  148
    );

    protected $action = array(
          590,  591,  592,  593,  594,  381,  595,  596,  597,  633,
          634,  487,   29,  101,  102,  103,  104,  105,  106,  107,
          108,  109,  110,  111,  112,-32766,-32766,-32766,   97,   98,
           99,    0,  245, -228, -282,-32766,-32766,-32766, -228, -488,
         1089,  551, 1092, 1090,  100,-32766, 1044,-32766,-32766,-32766,
        -32766,-32766,  598,  908,  910,-32766,    7,-32766,-32766,-32766,
        -32766,-32766,-32766,   24,-32766,   25,  599,  600,  601,  602,
          603,  604,  605,-32766,  118,  666,  876,  877,  878,  875,
          874,  873,  606,  607,  608,  609,  610,  611,  612,  613,
          614,  615,  616,  636,  637,  638,  639,  640,  628,  629,
          630,  631,  632,  617,  618,  619,  620,  621,  622,  623,
          660,  661,  662,  663,  664,  665,  624,  625,  626,  627,
          657,  648,  646,  647,  643,  644,  382,  635,  641,  642,
          649,  650,  652,  651,  653,  654, -441,  672,   74,   75,
           76,  645,  656,  655,  686,  687,  658,   43,   44,  398,
           45,   46,-32766,-32766,-32766,  231,   47,   48,   28,   49,
           77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
           87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,   98,   99, 1081,  245, -488, 1080, -488,  345,-32766,
        -32766,-32766,   50,   51,  116,   73,  100, -441,   52,  221,
           53,  225,  226,   54,   55,   56,   57,   58,   59,   60,
           61, -441,   22,  238,   62,  353,  128, -227, 1003, -441,
         1008, 1009,  668,  365, 1041,  233, -477,  558, 1007,-32766,
        -32766,-32766, 1041,  745,-32767,-32767,-32767,-32767,   92,   93,
           94,   95,   96, -479,   27,  228,  246,  357, -487,-32766,
          271,-32766,-32766,-32766,-32766,  264,  269,  424,  876,  877,
          878,  875,  874,  873,  868,  411,  412,  122,  278,  668,
           94,   95,   96,  831,  415,  416,  293, 1013, 1014, 1015,
         1016, 1010, 1011,  249, 1058,  671, -441, -441,  425, 1017,
         1012,  355,-32766,-32766,-32766,  295, 1041,   64,  252,  261,
         1086,  266,  270,  399, -132, -132, -132,   -4,  745,  400,
          270,  475,-32766,  735,-32766,-32766,   33,   18,  401, -132,
          402, -132,  403, -132,  404, -132,  299,  405, -132, -132,
         -132,   35,   36,  406,  354,  425,   37,  407,  355, -227,
           63,  448,  350,  292,  294,  408,  409, -441, -441,  369,
          252,  410, -251, -443,  721,  767,  413,  414,  798,   22,
         1055, -441, -441, -173,   41,  227, -172,  123,  231, -441,
         -441, 1041, -477,  370,  270, 1007,   39,  539,  399,  377,
           42,  748,  556, -132,  400,  745,-32766,-32766,  735, -479,
          393,   33,   18,  401, -487,  402, -487,  403, 1021,  404,
          825,  826,  405,  991,  984,-32766,   35,   36,  406,  354,
          343,   37,  407,  560, -443,   63,  260,  745,  292,  294,
          408,  409,  416, -232,   30,  254,  410,  991, -443,  678,
          767,  413,  414,  124,  252,  222, -443,  253, -446,  312,
        -32766,-32766,-32766,  540,   66,  561,  355,  117,  282,  270,
          280,  854,  825,  826,  113,  399,  748,  556,   -4,  115,
        -32766,  400,-32766,-32766,-32766,  735,  511,   19,   33,   18,
          401, -442,  402,  114,  403,  -89,  404,   67,  799,  405,
          122, 1041,  248,   35,   36,  406,  119,  399,   37,  407,
          120,  745,   63,  400,  538,  292,  294,  735, -251,  127,
           33,   18,  401,  410,  402, 1041,  403,  131,  404, -173,
          133,  405, -172,  134,  984,   35,   36,  406,  568,  562,
           37,  407,  573,  745,   63,  351, 1059,  292,  294,-32766,
        -32766,-32766, -442,  748,  556,  410,  825,  826,  984,  524,
          525,  130,  317,  391,    6,  744, -442,  686,  687,-32766,
          760,  563,  504,  505, -442,  129, -445,  825,  826,  270,
          121,  399,  853,  584,  229,  748,  556,  400,  865,  574,
          230,  735,  232,  245,   33,   18,  401,  100,  402,   40,
          403,  534,  404,  270,  326,  405,  305,  364, 1091,   35,
           36,  406,  446,  399,   37,  407,  508,  745,   63,  400,
          366,  292,  294,  735,  443,  447,   33,   18,  401,  410,
          402,  461,  403,  463,  404,  668,  669,  405,  702, 1084,
          512,   35,   36,  406,  520,  569,   37,  407,  980,  745,
           63,  535,-32766,  292,  294,  452,  549,  457,  -81,  784,
          556,  410,   10,  768,  984,  516, -400,  769,  466,  220,
          762,  262,  517,  528,   31,  502,  268, 1020,  229,    0,
          362,    0,  126,    0,    0,    0,    0,  399,    0,  265,
          263,  748,  556,  400,    0,    0,    0,  735,    0,    0,
           33,   18,  401,    0,  402,    0,  403,    0,  404,    0,
           22,  405,    0,    0,    0,   35,   36,  406,    0,  399,
           37,  407, 1041, 1023,   63,  400, 1007,  292,  294,  735,
            3,    9,   33,   18,  401,  410,  402,  311,  403,  323,
          404,   32,  331,  405,  332,  335,  365,   35,   36,  406,
          454,  346,   37,  407,  347,  984,   63, -230,   22,  292,
          294,-32766,-32766,-32766,  582,  748,  556,  410,  583,  726,
         1041,  849,  415,  416, 1007,  801,  785,  792,  850,  793,
          724,-32766,  782,-32766,-32766,-32766,-32766,-32766,-32766,-32767,
        -32767,-32767,-32767,-32767,  780,   66,  857,  748,  556,  860,
          270,  861,  858,  984,  859,  576,  557,  564,  566,  567,
          571,  572,  575,  577,  579,  580,  276,  277,  340,  341,
          415,  416,  559, -469,  722, 1088,  681,  680,  690,  691,
          688, 1087,  689,  755,  763,  970,  971,  753,  866,  766,
          765,  764,    0,   66,  972,  790,  791, 1085,  270, 1042,
         1035, 1048, 1053, 1056,    0, -467, -446, -445, -444,   21,
           23,   26,   34,   38,   65,   68,   69,   70,   71,   72,
          125,  132,  135,  223,  224,  241,  242,  243,  244,  279,
          342,  344,    0, -230, -227,   13,   14,   15,   17,  315,
          383,  386,  389,  396,  545,  995,  947, 1005,  832,  976,
          -89,   11,   12,   16,   20,  256,    0,  314,  483,  499,
          548,  951,  948,    0, -412,  964,    0, 1004, 1033, 1034,
         1047, 1083,  510,    0, 1022
    );

    protected $actionCheck = array(
            2,    3,    4,    5,    6,   29,    8,    9,   10,   11,
           12,   48,   15,   16,   17,   18,   19,   20,   21,   22,
           23,   24,   25,   26,   27,    8,    9,   10,   50,   51,
           52,    0,   54,  148,   79,    8,    9,   10,  153,    7,
           77,   77,   79,   80,   66,   28,    1,   30,   31,   32,
           33,   34,   54,   56,   57,   28,    7,   30,   31,   32,
           33,   34,   35,    7,  109,    7,   68,   69,   70,   71,
           72,   73,   74,  118,    7,   77,  112,  113,  114,  115,
          116,  117,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  150,  129,  130,  131,
          132,  133,  134,  135,  136,  137,   67,    1,    8,    9,
           10,  143,  144,  145,  102,  103,  148,    2,    3,    4,
            5,    6,    8,    9,   10,   35,   11,   12,   28,   14,
           30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
           40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
           50,   51,   52,   79,   54,  153,   82,  155,  146,    8,
            9,   10,   47,   48,   13,  150,   66,  128,   53,   13,
           55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
           65,  142,   67,   68,   69,   70,   67,  148,    1,  150,
           75,   76,   77,  146,   79,    7,    7,  150,   83,    8,
            9,   10,   79,    1,   41,   42,   43,   44,   45,   46,
           47,   48,   49,    7,  140,  141,    7,  102,    7,   28,
           67,   30,   31,   32,   33,  109,    7,  112,  112,  113,
          114,  115,  116,  117,  118,  120,  121,  147,    7,   77,
           47,   48,   49,  153,  129,  130,    7,  132,  133,  134,
          135,  136,  137,  138,    1,  149,   67,   67,  143,  144,
          145,  146,    8,    9,   10,    7,   79,  152,   28,  154,
          151,  156,  157,   71,   72,   73,   74,    0,    1,   77,
          157,  128,   28,   81,   30,   31,   84,   85,   86,   87,
           88,   89,   90,   91,   92,   93,    7,   95,   96,   97,
           98,   99,  100,  101,  102,  143,  104,  105,  146,  153,
          108,   82,    7,  111,  112,  113,  114,  128,  128,    7,
           28,  119,    7,   67,  122,  123,  124,  125,   29,   67,
           77,  142,  142,    7,   67,   35,    7,  150,   35,  150,
          150,   79,  153,    7,  157,   83,   67,   77,   71,    7,
            7,  149,  150,  151,   77,    1,    8,    9,   81,  153,
            7,   84,   85,   86,  153,   88,  155,   90,  139,   92,
          130,  131,   95,    1,  112,    8,   99,  100,  101,  102,
          103,  104,  105,   29,  128,  108,  109,    1,  111,  112,
          113,  114,  130,  153,   13,  128,  119,    1,  142,  122,
          123,  124,  125,  150,   28,   13,  150,  128,  152,  142,
            8,    9,   10,  143,  152,   29,  146,  150,   33,  157,
          143,  151,  130,  131,   15,   71,  149,  150,  151,  150,
           28,   77,   30,   31,   32,   81,   72,   73,   84,   85,
           86,   67,   88,   15,   90,  153,   92,  147,  149,   95,
          147,   79,   29,   99,  100,  101,   15,   71,  104,  105,
           15,    1,  108,   77,   79,  111,  112,   81,  153,   15,
           84,   85,   86,  119,   88,   79,   90,   15,   92,  153,
           15,   95,  153,   15,  112,   99,  100,  101,   29,   29,
          104,  105,   29,    1,  108,  123,  153,  111,  112,    8,
            9,   10,  128,  149,  150,  119,  130,  131,  112,   72,
           73,   97,   98,  102,  103,   29,  142,  102,  103,   28,
           35,   29,  106,  107,  150,   29,  152,  130,  131,  157,
           29,   71,  149,  150,   35,  149,  150,   77,  149,  150,
           35,   81,   35,   54,   84,   85,   86,   66,   88,   67,
           90,   74,   92,  157,   78,   95,   77,   77,   80,   99,
          100,  101,   79,   71,  104,  105,   79,    1,  108,   77,
           77,  111,  112,   81,   77,   77,   84,   85,   86,  119,
           88,   77,   90,   77,   92,   77,   77,   95,   77,   77,
           87,   99,  100,  101,   79,   29,  104,  105,   79,    1,
          108,   91,   82,  111,  112,   82,   89,   86,   94,  149,
          150,  119,   94,  123,  112,   93,  142,  123,   94,   94,
          147,  126,   96,   96,  149,  109,  126,  139,   35,   -1,
          102,   -1,  148,   -1,   -1,   -1,   -1,   71,   -1,  110,
          127,  149,  150,   77,   -1,   -1,   -1,   81,   -1,   -1,
           84,   85,   86,   -1,   88,   -1,   90,   -1,   92,   -1,
           67,   95,   -1,   -1,   -1,   99,  100,  101,   -1,   71,
          104,  105,   79,  139,  108,   77,   83,  111,  112,   81,
          142,  142,   84,   85,   86,  119,   88,  142,   90,  146,
           92,  149,  146,   95,  146,  146,  146,   99,  100,  101,
          146,  146,  104,  105,  146,  112,  108,  148,   67,  111,
          112,    8,    9,   10,  149,  149,  150,  119,  149,  149,
           79,  149,  129,  130,   83,  149,  149,  149,  149,  149,
          149,   28,  149,   30,   31,   32,   33,   34,   35,   36,
           37,   38,   39,   40,  149,  152,  149,  149,  150,  149,
          157,  149,  149,  112,  149,  151,  150,  150,  150,  150,
          150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
          129,  130,  150,  152,  151,  151,  151,  151,  151,  151,
          151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
          151,  151,   -1,  152,  151,  151,  151,  151,  157,  151,
          151,  151,  151,  151,   -1,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
          152,  152,   -1,  153,  153,  153,  153,  153,  153,  153,
          153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
          153,  153,  153,  153,  153,  153,   -1,  153,  153,  153,
          153,  153,  153,   -1,  154,  154,   -1,  155,  155,  155,
          155,  155,  155,   -1,  156
    );

    protected $actionBase = array(
            0,  232,  307,  217,  300,  635,   -2,   -2,   -2,   -2,
          -36,  416,  522,  522,  596,  522,  384,  490,  628,  628,
          628,  120,  330,  330,  330,  333,  529,  506,  531,  535,
          537,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  136,  136,  329,  411,
          732,  738,  735,  730,  728,  555,  734,  739,  422,  676,
          678,  526,  679,  680,  681,  682,  736,  729,  747,  731,
          737,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  397,  181,
          378,  144,  144,  144,  144,  144,  144,  144,  144,  144,
          144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
          521,  521,  521,  284,  432,  219,  221,   69,   17,  220,
           27,  733,  733,  733,  733,  733,  193,  193,  193,  193,
          623,  623,  671,  292,  292,  292,  292,  292,  292,  292,
          292,  292,  292,  292,  668,  669,  670,  673,  402,  223,
          223,  270,  270,  270,  270,  426,  322,  -45,  406,  259,
          564,  748,  427,  283,  283,  286,  404,  -22,  -22,  -22,
           42,  553,  532,  532,  532,  532,  104,  104,  532,  532,
           45,  -37,  220,  220,  297,  220,  445,  445,  445,  192,
           77,  550,  192,  652,  556,  674,  557,  675,  309,   32,
          241,  585,  153,  588,  558,  153,  446,  394,  467,  727,
          136,  504,  136,  136,  136,  136,  136,  136,  136,  136,
          136,  153,  153,  136,  -24,  136,  413,  329,  419,  519,
          536,  183,  589,  646,  359,  373,  149,  519,  519,  519,
         -115,  647,  648,  345,  186,  649,  356,  441,  236,  415,
          538,  538,  515,  527,  534,  538,  538,  538,  538,  517,
          538,  687,  687,  691,  515,  538,  687,  515,   67,  342,
          269,  288,  515,  366,  525,  538,  530,  530,  372,  527,
          513,  218,   58,  543,  687,  687,  543,  534,  239,  515,
          249,  595,  599,  546,  503,  261,  453,  453,  335,  546,
          383,  515,  453,  517,   49,  319,  453,   31,  692,  693,
          516,  694,  689,  695,  709,  696,  509,  636,  520,  524,
          701,  702,  697,  528,  510,  690,  688,  584,  523,  439,
          458,  568,  512,  686,  558,  580,  511,  511,  511,  512,
          684,  511,  511,  511,  511,  511,  511,  511,  511,  742,
           56,  575,  551,  471,  573,  554,  475,  642,  518,  584,
          584,  653,  740,  741,  539,  703,  722,  698,  505,  514,
          439,  484,  715,  704,  634,  576,  541,  578,  705,  716,
          723,  643,  439,  724,  654,  542,  584,  655,  511,  683,
          651,  743,  744,  685,  745,  717,  579,  508,  746,  656,
          725,  644,  645,  572,  712,  710,  718,  657,  719,  600,
          533,  552,  708,  545,  707,  637,  658,  659,  492,  602,
          660,  699,  606,  713,  714,  711,  607,  608,  638,  639,
          495,  661,  498,  609,  700,  489,  507,  540,  610,  549,
          726,  662,  640,  706,  611,  613,  663,  664,  721,  544,
          580,  569,  559,  548,  547,  641,  665,  720,  493,  625,
          627,  630,  632,  666,  633,  667,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  145,  145,   -2,   -2,
           -2,    0,    0,    0,    0,   -2,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
          145,  145,  145,  145,  145,  145,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
           -3,  130,   -3,  130,   -3,  130,  130,  130,  130,  130,
          130,  -22,  -22,  -22,  -22,  192,  192,  192,  192,  192,
          192,  192,  192,  192,  192,  192,  192,  192,  192,  146,
          146,  146,  146,  192,  -22,  -22,  192,  192,  192,  192,
          192,  192,  146,  192,  104,  104,  104,  192,  153,  153,
            0,    0,    0,    0,    0,  538,  104,  192,  192,  192,
          192,    0,    0,  192,  192,  153,    0,    0,    0,    0,
            0,  538,  538,  538,    0,  538,  104,    0,  136,  444,
          444,  444,  444,    0,    0,    0,  538,    0,  538,  513,
            0,    0,    0,    0,  515,    0,  687,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  511,  703,    0,  458,  539,    0,
            0,    0,  511,  511,  511,    0,  539,  539,    0,    0,
          539
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,   89,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  489,  489,  489,   89,  302,32767,32767,32767,
        32767,  302,  302,32767,  481,  439,  439,  439,  439,  439,
          439,  439,  481,32767,32767,32767,32767,32767,  381,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,   89,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  486,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  364,  365,  367,  368,  301,  440,  490,  250,  485,
          300,  125,  261,  252,  204,  298,  236,  129,  329,  382,
          331,  380,  384,  330,  307,  311,  312,  313,  314,  315,
          316,  317,  318,  319,  320,  321,  322,  305,  306,  383,
          361,  360,  359,  327,  328,  304,  332,  304,  334,  304,
          333,  350,  351,  348,  349,  352,  353,  354,  355,  356,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,   89,  284,  284,  284,  284,32767,  341,
          342,  242,  242,  242,  242,32767,  242,  285,32767,32767,
        32767,32767,32767,32767,32767,  433,  358,  336,  337,  335,
        32767,  411,32767,32767,32767,32767,32767,  413,32767,   89,
        32767,32767,  324,  326,  405,  308,32767,32767,   89,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  408,  441,
          441,32767,32767,   89,  399,   89,  169,  223,  225,  174,
        32767,  416,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  346,
        32767,  497,  421,32767,  441,32767,32767,  338,  339,  340,
          441,32767,32767,  441,  441,32767,  441,32767,  441,32767,
        32767,32767,  174,32767,32767,32767,32767,32767,32767,32767,
           89,  414,  414,  409,  174,32767,32767,  174,   88,   88,
           88,   88,  174,   88,  187,32767,  185,  185,   88,   89,
           89,   88,   88,  189,32767,  455,  189,   89,   88,  174,
           88,  209,  209,  390,  176,   88,  244,  244,   88,  390,
           88,  174,  244,   89,   88,   88,  244,32767,32767,32767,
           83,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  401,32767,32767,
          421,32767,  434,  453,  399,32767,  344,  345,  347,32767,
          443,  369,  370,  371,  372,  373,  374,  375,  377,32767,
          482,  404,32767,32767,   85,  116,  260,32767,  495,   85,
          402,32767,  495,32767,32767,32767,32767,32767,32767,32767,
          229,32767,32767,32767,32767,   85,32767,   85,32767,32767,
        32767,32767,  478,32767,  441,32767,  403,32767,  343,  417,
          460,32767,32767,  442,32767,32767,   85,32767,32767,32767,
        32767,32767,32767,32767,32767,  421,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  297,32767,
        32767,32767,32767,32767,32767,  441,32767,32767,32767,32767,
          235,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,   83,
           60,32767,  278,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  131,  131,    3,    3,
          131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
          131,  131,  131,  131,  131,  263,  164,  263,  217,  263,
          263,  220,  209,  209,  270
    );

    protected $goto = array(
          168,  139,  139,  139,  168,  165,  149,  151,  184,  169,
          165,  165,  165,  148,  166,  166,  166,  166,  166,  166,
          166,  148,  161,  162,  163,  164,  181,  179,  182,  426,
          427,  319,  428,  431,  432,  433,  434,  435,  436,  437,
          438,  895,  137,  140,  141,  142,  167,  143,  144,  145,
          146,  147,  150,  178,  180,  183,  200,  203,  204,  206,
          208,  210,  211,  212,  213,  214,  215,  216,  217,  218,
          219,  239,  240,  257,  258,  259,  327,  328,  329,  478,
          185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
          195,  196,  197,  198,  152,  199,  153,  170,  171,  172,
          201,  173,  154,  155,  156,  157,  174,  158,  202,  138,
          175,  159,  176,  177,  160,  541,  207,  444,  742,  712,
          479,  864,  554,    5,  205,  533,  862,  480,  718,  675,
          322,  267,  205,  449,  449,  449,  251,  449,  800,  285,
          981,  779,  676,  578,  441,  442,  809,  804,  467,  464,
          449,  441,  581,  500,  501,  527,  531,  797,  536,  537,
          811,  544,  796,  546,  553,  807,  555,  519,  777,  777,
          777,  777,  532,  677,  771,  778,  318, 1076, 1076,  552,
          707,  695,  838,  783,  842,  235,  703,  236,  237,  786,
          493,  513,  756,  490, 1076,  982,  473,  449,  449,  816,
         1068,  776,  465,  486,  449,  449,  698,  449, 1079,  692,
          834,  879,  450,  983, 1037,  711,  977,  703,  738,  703,
          739,  302,  476,  429,  429,  429,  429,  429,  429,  429,
          429,  429,  429,  429,  429,  429,  429,  430,  430,  430,
          430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
          430, 1060,  460,  304,  307,  456,  481,  482,  484,  470,
          472, 1077, 1077,  942,  679,  819,  694,  694,  472,  494,
          514,  704,  704,  704,  706,  830,  693,  823, 1077,  477,
          489,  684, 1049,  734,  729,  730,  743,  685,  731,  682,
          732,  733,  291,  506,  683,  283,  737,  496,  498,  547,
          775,  316,  550,  313,  699,  839,  696,  565,  521,  973,
          334,  515,  338,  324,  324,  272,  273,  289,  474,  330,
          275,  333,  290,  336,  495,  495, 1006, 1006, 1006, 1006,
         1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  978,  286,
          287,  376,  708,  788,  492,  843,  881,  392,    0,  985,
            0,    0,  824,  824,  824,  824,  985,  824,  320,  824,
          872,  455, 1046,  824,    0,    0,  468,    0,    0, 1046,
            0,    0,    0,  985,  985,  985,  985, 1057, 1057,  985,
          985,    0,    0,  384,    0,    0,    0,    0,    0,    0,
          751,    0,    0,  752, 1043,    8,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  841,    0,    0,  841,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0, 1050, 1051,    0,    0,    0,
            0,    0,    0,    0,    0,    0,  814,  814, 1065
    );

    protected $gotoCheck = array(
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   59,   52,    8,   10,   32,
            7,    7,    7,  105,   52,    7,    7,   92,   12,   12,
           81,  127,   52,    8,    8,    8,  127,    8,   12,   75,
           87,   12,   13,   12,   70,   12,   12,   12,    8,   35,
            8,   70,   35,   35,   35,   35,   35,   35,   35,   35,
           35,   35,   35,   35,   35,   35,   35,   64,   70,   70,
           70,   70,   64,   14,   70,   70,   64,  138,  138,    5,
           11,   11,   11,   36,   11,   68,   22,   68,   68,   11,
           42,   42,   11,   11,  138,   87,  129,    8,    8,   11,
          137,   11,    8,    8,    8,    8,   11,    8,  138,   11,
           89,   11,    8,   87,   87,   11,   11,   22,   51,   22,
           51,   48,    8,  128,  128,  128,  128,  128,  128,  128,
          128,  128,  128,  128,  128,  128,  128,  130,  130,  130,
          130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
          130,  135,   80,   45,   45,   45,   45,   45,   45,   49,
           80,  139,  139,  111,   10,   83,   22,   22,   80,   50,
           50,   22,   22,   22,   22,   85,   22,   86,  139,    2,
            2,   10,  132,   10,   10,   10,   10,   10,   10,   10,
           10,   10,   16,   20,   10,    9,   10,   63,   63,   63,
           71,   71,   71,   15,   26,   91,   24,   77,   19,  117,
           52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
           52,   52,   52,   52,   81,   81,   81,   81,   81,   81,
           81,   81,   81,   81,   81,   81,   81,   81,  120,   75,
           75,   66,   28,   74,   67,   94,  108,  115,   -1,   59,
           -1,   -1,   59,   59,   59,   59,   59,   59,   61,   59,
          105,   61,   92,   59,   -1,   -1,   61,   -1,   -1,   92,
           -1,   -1,   -1,   59,   59,   59,   59,   92,   92,   59,
           59,   -1,   -1,   61,   -1,   -1,   -1,   -1,   -1,   -1,
           59,   -1,   -1,   59,   92,   61,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   92,   -1,   -1,   92,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   92,   92,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   80,   80,   80
    );

    protected $gotoBase = array(
            0,    0, -279,    0,    0,  169,    0,  117, -143,   15,
          -19, -179,  127,  140,  171,   12,   32,    0,    0,  -33,
           16,    0,  -74,    0,   13,    0,   26,    0,  -27,  -21,
            0,    0,  112,    0,    0, -408,  166,    0,    0,    0,
            0,    0,  159,    0,    0,  217,    0,    0,  188,   35,
           49,  205,   90,    0,    0,    0,    0,    0,    0,  111,
            0,    4,    0,   55, -220,    0,  -26,  -32, -392,    0,
          -94,   37,    0,    0,  -34, -243,    0,  -10,    0,    0,
          226,  104,    0,   19,    0,   27,   25, -161,    0,  185,
            0,   10,  124,    0,  -25,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,  113,    0,    0,  -47,    0,
            0,   18,    0,    0,    0,  -42,    0,  -43,    0,    0,
           -4,    0,    0,    0,    0,    0,    0, -130,    3,  173,
           17,    0,   28,    0,    0,  209,    0,  176,  -73,   11,
            0,    0
    );

    protected $gotoDefault = array(
        -32768,  397,  586,    2,  587,  659,  667,  522,  417,  445,
          736,  884,  781,  719,  720,  308,  348,  300,  306,  507,
          497,  388,  705,  360,  697,  385,  700,  359,  709,  136,
          523,  394,  713,    1,  715,  451,  747,  297,  723,  298,
          526,  725,  458,  727,  728,  303,  309,  310,  888,  469,
          459,  746,  209,  462,  740,  296,  741,  750,  339,  301,
          371,  529,  503,  485,  518,  418,  373,  491,  234,  471,
          992,  773,  380,  368,  787,  284,  795,  570,  803,  806,
          419,  420,  378,  818,  379,  828,  822, 1000,  372,  833,
          361,  840, 1032,  363,  844,  847,  349,  509,  337,  851,
          852,    4,  856,  542,  543,  871,  247,  390,  880,  358,
          894,  352,  961,  963,  453,  387,  974,  367,  530,  395,
          979, 1036,  356,  421,  374,  274,  288,  250,  422,  439,
          255,  423,  375, 1039,  325, 1061,  440, 1069, 1078,  281,
          321,  488
    );

    protected $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
            5,    5,    5,    5,    6,    6,    6,    6,    6,    6,
            6,    7,    7,    8,    8,    9,   10,   10,   11,   11,
            4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
            4,   16,   16,   17,   17,   17,   17,   19,   21,   21,
           15,   23,   23,   20,   25,   25,   22,   22,   24,   24,
           26,   26,   18,   27,   27,   28,   30,   31,   31,   32,
           33,   33,   35,   34,   34,   34,   34,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
           36,   36,   12,   12,   55,   55,   58,   58,   57,   56,
           56,   49,   60,   60,   61,   61,   62,   62,   13,   14,
           14,   14,   65,   65,   65,   66,   66,   69,   69,   67,
           67,   71,   72,   72,   43,   43,   51,   51,   54,   54,
           54,   53,   73,   73,   74,   44,   44,   44,   44,   75,
           75,   76,   76,   77,   77,   41,   41,   37,   37,   78,
           39,   39,   79,   38,   38,   40,   40,   50,   50,   50,
           50,   63,   63,   82,   82,   83,   83,   85,   85,   86,
           86,   86,   84,   84,   64,   64,   87,   87,   88,   88,
           89,   89,   89,   46,   90,   90,   91,   47,   93,   93,
           94,   94,   68,   68,   95,   95,   95,   95,  100,  100,
          101,  101,  102,  102,  102,  102,  102,  103,  104,  104,
           99,   99,   96,   96,   98,   98,  106,  106,  105,  105,
          105,  105,  105,  105,   97,  107,  107,  108,  108,   48,
          109,  109,   42,   42,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
           29,   29,   29,   29,   29,   29,   29,  116,  110,  110,
          115,  115,  118,  119,  119,  120,  121,  121,  121,   70,
           70,   59,   59,   59,  111,  111,  111,  123,  123,  112,
          112,  114,  114,  114,  117,  117,  128,  128,  128,   81,
          130,  130,  130,  113,  113,  113,  113,  113,  113,  113,
          113,  113,  113,  113,  113,  113,  113,  113,  113,   45,
           45,  126,  126,  126,  122,  122,  122,  131,  131,  131,
          131,  131,  131,   52,   52,   52,   92,   92,   92,   92,
          133,  125,  125,  125,  125,  125,  125,  124,  124,  124,
          132,  132,  132,  132,   80,  134,  134,  135,  135,  135,
          135,  135,  129,  136,  136,  137,  137,  137,  137,  137,
          137,  127,  127,  127,  127,  139,  140,  138,  138,  138,
          138,  138,  138,  138,  141,  141,  141,  141
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    3,    1,    1,    1,    0,    1,
            1,    1,    1,    1,    3,    5,    4,    3,    4,    2,
            3,    1,    1,    7,    8,    6,    7,    2,    3,    1,
            2,    3,    1,    2,    3,    1,    1,    3,    1,    2,
            1,    2,    2,    3,    1,    3,    2,    3,    1,    3,
            2,    0,    1,    1,    1,    1,    1,    3,    7,   10,
            5,    7,    9,    5,    3,    3,    3,    3,    3,    3,
            1,    2,    5,    7,    9,    5,    6,    3,    3,    2,
            1,    7,    1,    1,    0,    2,    1,    3,    8,    0,
            4,    2,    1,    3,    0,    1,    0,    1,   10,    7,
            6,    5,    1,    2,    2,    0,    2,    0,    2,    0,
            2,    2,    1,    3,    1,    4,    1,    4,    1,    1,
            4,    2,    1,    3,    3,    3,    4,    4,    5,    0,
            2,    4,    3,    1,    1,    1,    4,    0,    2,    5,
            0,    2,    6,    0,    2,    0,    3,    1,    2,    1,
            1,    2,    0,    1,    3,    4,    6,    1,    2,    1,
            1,    1,    0,    1,    0,    2,    2,    4,    1,    3,
            1,    2,    2,    2,    3,    1,    1,    2,    3,    1,
            1,    3,    2,    0,    3,    4,    9,    3,    1,    3,
            0,    2,    4,    5,    4,    4,    4,    3,    1,    1,
            1,    3,    1,    1,    0,    1,    1,    2,    1,    1,
            1,    1,    1,    1,    2,    1,    3,    1,    3,    2,
            3,    1,    0,    1,    1,    3,    3,    3,    4,    1,
            2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    1,    3,
            2,    1,    2,    4,    2,   10,   11,    7,    3,    2,
            0,    4,    2,    1,    3,    2,    2,    2,    4,    1,
            1,    1,    2,    3,    1,    1,    1,    1,    1,    0,
            3,    0,    1,    1,    0,    1,    1,    3,    3,    3,
            4,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    3,    2,    3,    3,    0,
            1,    1,    3,    1,    1,    3,    1,    1,    4,    4,
            4,    1,    4,    1,    1,    3,    1,    4,    2,    2,
            3,    1,    4,    4,    3,    3,    3,    1,    3,    1,
            1,    3,    1,    1,    4,    3,    1,    1,    1,    3,
            3,    0,    1,    3,    1,    3,    1,    4,    2,    0,
            2,    2,    2,    1,    2,    1,    1,    1,    4,    3,
            3,    3,    6,    3,    1,    1,    2,    1
    );

    protected $productions = array(
        "\$start : start",
        "start : top_statement_list",
        "top_statement_list_ex : top_statement_list_ex top_statement",
        "top_statement_list_ex : /* empty */",
        "top_statement_list : top_statement_list_ex",
        "reserved_non_modifiers : T_INCLUDE",
        "reserved_non_modifiers : T_INCLUDE_ONCE",
        "reserved_non_modifiers : T_EVAL",
        "reserved_non_modifiers : T_REQUIRE",
        "reserved_non_modifiers : T_REQUIRE_ONCE",
        "reserved_non_modifiers : T_LOGICAL_OR",
        "reserved_non_modifiers : T_LOGICAL_XOR",
        "reserved_non_modifiers : T_LOGICAL_AND",
        "reserved_non_modifiers : T_INSTANCEOF",
        "reserved_non_modifiers : T_NEW",
        "reserved_non_modifiers : T_CLONE",
        "reserved_non_modifiers : T_EXIT",
        "reserved_non_modifiers : T_IF",
        "reserved_non_modifiers : T_ELSEIF",
        "reserved_non_modifiers : T_ELSE",
        "reserved_non_modifiers : T_ENDIF",
        "reserved_non_modifiers : T_ECHO",
        "reserved_non_modifiers : T_DO",
        "reserved_non_modifiers : T_WHILE",
        "reserved_non_modifiers : T_ENDWHILE",
        "reserved_non_modifiers : T_FOR",
        "reserved_non_modifiers : T_ENDFOR",
        "reserved_non_modifiers : T_FOREACH",
        "reserved_non_modifiers : T_ENDFOREACH",
        "reserved_non_modifiers : T_DECLARE",
        "reserved_non_modifiers : T_ENDDECLARE",
        "reserved_non_modifiers : T_AS",
        "reserved_non_modifiers : T_TRY",
        "reserved_non_modifiers : T_CATCH",
        "reserved_non_modifiers : T_FINALLY",
        "reserved_non_modifiers : T_THROW",
        "reserved_non_modifiers : T_USE",
        "reserved_non_modifiers : T_INSTEADOF",
        "reserved_non_modifiers : T_GLOBAL",
        "reserved_non_modifiers : T_VAR",
        "reserved_non_modifiers : T_UNSET",
        "reserved_non_modifiers : T_ISSET",
        "reserved_non_modifiers : T_EMPTY",
        "reserved_non_modifiers : T_CONTINUE",
        "reserved_non_modifiers : T_GOTO",
        "reserved_non_modifiers : T_FUNCTION",
        "reserved_non_modifiers : T_CONST",
        "reserved_non_modifiers : T_RETURN",
        "reserved_non_modifiers : T_PRINT",
        "reserved_non_modifiers : T_YIELD",
        "reserved_non_modifiers : T_LIST",
        "reserved_non_modifiers : T_SWITCH",
        "reserved_non_modifiers : T_ENDSWITCH",
        "reserved_non_modifiers : T_CASE",
        "reserved_non_modifiers : T_DEFAULT",
        "reserved_non_modifiers : T_BREAK",
        "reserved_non_modifiers : T_ARRAY",
        "reserved_non_modifiers : T_CALLABLE",
        "reserved_non_modifiers : T_EXTENDS",
        "reserved_non_modifiers : T_IMPLEMENTS",
        "reserved_non_modifiers : T_NAMESPACE",
        "reserved_non_modifiers : T_TRAIT",
        "reserved_non_modifiers : T_INTERFACE",
        "reserved_non_modifiers : T_CLASS",
        "reserved_non_modifiers : T_CLASS_C",
        "reserved_non_modifiers : T_TRAIT_C",
        "reserved_non_modifiers : T_FUNC_C",
        "reserved_non_modifiers : T_METHOD_C",
        "reserved_non_modifiers : T_LINE",
        "reserved_non_modifiers : T_FILE",
        "reserved_non_modifiers : T_DIR",
        "reserved_non_modifiers : T_NS_C",
        "reserved_non_modifiers : T_HALT_COMPILER",
        "reserved_non_modifiers : T_IN",
        "semi_reserved : reserved_non_modifiers",
        "semi_reserved : T_STATIC",
        "semi_reserved : T_ABSTRACT",
        "semi_reserved : T_FINAL",
        "semi_reserved : T_PRIVATE",
        "semi_reserved : T_PROTECTED",
        "semi_reserved : T_PUBLIC",
        "identifier : T_STRING",
        "identifier : semi_reserved",
        "namespace_name_parts : T_STRING",
        "namespace_name_parts : namespace_name_parts T_NS_SEPARATOR T_STRING",
        "namespace_name : namespace_name_parts",
        "semi : ';'",
        "semi : error",
        "no_comma : /* empty */",
        "no_comma : ','",
        "top_statement : statement",
        "top_statement : function_declaration_statement",
        "top_statement : class_declaration_statement",
        "top_statement : T_HALT_COMPILER",
        "top_statement : T_NAMESPACE namespace_name semi",
        "top_statement : T_NAMESPACE namespace_name '{' top_statement_list '}'",
        "top_statement : T_NAMESPACE '{' top_statement_list '}'",
        "top_statement : T_USE use_declarations semi",
        "top_statement : T_USE use_type use_declarations semi",
        "top_statement : group_use_declaration semi",
        "top_statement : T_CONST constant_declaration_list semi",
        "use_type : T_FUNCTION",
        "use_type : T_CONST",
        "group_use_declaration : T_USE use_type namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE use_type T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' unprefixed_use_declarations '}'",
        "group_use_declaration : T_USE namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "group_use_declaration : T_USE T_NS_SEPARATOR namespace_name_parts T_NS_SEPARATOR '{' inline_use_declarations '}'",
        "unprefixed_use_declarations : non_empty_unprefixed_use_declarations no_comma",
        "non_empty_unprefixed_use_declarations : non_empty_unprefixed_use_declarations ',' unprefixed_use_declaration",
        "non_empty_unprefixed_use_declarations : unprefixed_use_declaration",
        "use_declarations : non_empty_use_declarations no_comma",
        "non_empty_use_declarations : non_empty_use_declarations ',' use_declaration",
        "non_empty_use_declarations : use_declaration",
        "inline_use_declarations : non_empty_inline_use_declarations no_comma",
        "non_empty_inline_use_declarations : non_empty_inline_use_declarations ',' inline_use_declaration",
        "non_empty_inline_use_declarations : inline_use_declaration",
        "unprefixed_use_declaration : namespace_name",
        "unprefixed_use_declaration : namespace_name T_AS T_STRING",
        "use_declaration : unprefixed_use_declaration",
        "use_declaration : T_NS_SEPARATOR unprefixed_use_declaration",
        "inline_use_declaration : unprefixed_use_declaration",
        "inline_use_declaration : use_type unprefixed_use_declaration",
        "constant_declaration_list : non_empty_constant_declaration_list no_comma",
        "non_empty_constant_declaration_list : non_empty_constant_declaration_list ',' constant_declaration",
        "non_empty_constant_declaration_list : constant_declaration",
        "constant_declaration : T_STRING '=' expr",
        "class_const_list : non_empty_class_const_list no_comma",
        "non_empty_class_const_list : non_empty_class_const_list ',' class_const",
        "non_empty_class_const_list : class_const",
        "class_const : identifier '=' expr",
        "inner_statement_list_ex : inner_statement_list_ex inner_statement",
        "inner_statement_list_ex : /* empty */",
        "inner_statement_list : inner_statement_list_ex",
        "inner_statement : statement",
        "inner_statement : function_declaration_statement",
        "inner_statement : class_declaration_statement",
        "inner_statement : T_HALT_COMPILER",
        "non_empty_statement : '{' inner_statement_list '}'",
        "non_empty_statement : T_IF '(' expr ')' statement elseif_list else_single",
        "non_empty_statement : T_IF '(' expr ')' ':' inner_statement_list new_elseif_list new_else_single T_ENDIF ';'",
        "non_empty_statement : T_WHILE '(' expr ')' while_statement",
        "non_empty_statement : T_DO statement T_WHILE '(' expr ')' ';'",
        "non_empty_statement : T_FOR '(' for_expr ';' for_expr ';' for_expr ')' for_statement",
        "non_empty_statement : T_SWITCH '(' expr ')' switch_case_list",
        "non_empty_statement : T_BREAK optional_expr semi",
        "non_empty_statement : T_CONTINUE optional_expr semi",
        "non_empty_statement : T_RETURN optional_expr semi",
        "non_empty_statement : T_GLOBAL global_var_list semi",
        "non_empty_statement : T_STATIC static_var_list semi",
        "non_empty_statement : T_ECHO expr_list semi",
        "non_empty_statement : T_INLINE_HTML",
        "non_empty_statement : expr semi",
        "non_empty_statement : T_UNSET '(' variables_list ')' semi",
        "non_empty_statement : T_FOREACH '(' expr T_AS foreach_variable ')' foreach_statement",
        "non_empty_statement : T_FOREACH '(' expr T_AS variable T_DOUBLE_ARROW foreach_variable ')' foreach_statement",
        "non_empty_statement : T_DECLARE '(' declare_list ')' declare_statement",
        "non_empty_statement : T_TRY '{' inner_statement_list '}' catches optional_finally",
        "non_empty_statement : T_THROW expr semi",
        "non_empty_statement : T_GOTO T_STRING semi",
        "non_empty_statement : T_STRING ':'",
        "non_empty_statement : error",
        "non_empty_statement : T_FOR '(' foreach_variable T_IN expr ')' foreach_statement",
        "statement : non_empty_statement",
        "statement : ';'",
        "catches : /* empty */",
        "catches : catches catch",
        "name_union : name",
        "name_union : name_union '|' name",
        "catch : T_CATCH '(' name_union T_VARIABLE ')' '{' inner_statement_list '}'",
        "optional_finally : /* empty */",
        "optional_finally : T_FINALLY '{' inner_statement_list '}'",
        "variables_list : non_empty_variables_list no_comma",
        "non_empty_variables_list : variable",
        "non_empty_variables_list : non_empty_variables_list ',' variable",
        "optional_ref : /* empty */",
        "optional_ref : '&'",
        "optional_ellipsis : /* empty */",
        "optional_ellipsis : T_ELLIPSIS",
        "function_declaration_statement : T_FUNCTION optional_ref T_STRING '(' parameter_list ')' optional_return_type '{' inner_statement_list '}'",
        "class_declaration_statement : class_entry_type T_STRING extends_from implements_list '{' class_statement_list '}'",
        "class_declaration_statement : T_INTERFACE T_STRING interface_extends_list '{' class_statement_list '}'",
        "class_declaration_statement : T_TRAIT T_STRING '{' class_statement_list '}'",
        "class_entry_type : T_CLASS",
        "class_entry_type : T_ABSTRACT T_CLASS",
        "class_entry_type : T_FINAL T_CLASS",
        "extends_from : /* empty */",
        "extends_from : T_EXTENDS class_name",
        "interface_extends_list : /* empty */",
        "interface_extends_list : T_EXTENDS class_name_list",
        "implements_list : /* empty */",
        "implements_list : T_IMPLEMENTS class_name_list",
        "class_name_list : non_empty_class_name_list no_comma",
        "non_empty_class_name_list : class_name",
        "non_empty_class_name_list : non_empty_class_name_list ',' class_name",
        "for_statement : statement",
        "for_statement : ':' inner_statement_list T_ENDFOR ';'",
        "foreach_statement : statement",
        "foreach_statement : ':' inner_statement_list T_ENDFOREACH ';'",
        "declare_statement : non_empty_statement",
        "declare_statement : ';'",
        "declare_statement : ':' inner_statement_list T_ENDDECLARE ';'",
        "declare_list : non_empty_declare_list no_comma",
        "non_empty_declare_list : declare_list_element",
        "non_empty_declare_list : non_empty_declare_list ',' declare_list_element",
        "declare_list_element : T_STRING '=' expr",
        "switch_case_list : '{' case_list '}'",
        "switch_case_list : '{' ';' case_list '}'",
        "switch_case_list : ':' case_list T_ENDSWITCH ';'",
        "switch_case_list : ':' ';' case_list T_ENDSWITCH ';'",
        "case_list : /* empty */",
        "case_list : case_list case",
        "case : T_CASE expr case_separator inner_statement_list",
        "case : T_DEFAULT case_separator inner_statement_list",
        "case_separator : ':'",
        "case_separator : ';'",
        "while_statement : statement",
        "while_statement : ':' inner_statement_list T_ENDWHILE ';'",
        "elseif_list : /* empty */",
        "elseif_list : elseif_list elseif",
        "elseif : T_ELSEIF '(' expr ')' statement",
        "new_elseif_list : /* empty */",
        "new_elseif_list : new_elseif_list new_elseif",
        "new_elseif : T_ELSEIF '(' expr ')' ':' inner_statement_list",
        "else_single : /* empty */",
        "else_single : T_ELSE statement",
        "new_else_single : /* empty */",
        "new_else_single : T_ELSE ':' inner_statement_list",
        "foreach_variable : variable",
        "foreach_variable : '&' variable",
        "foreach_variable : list_expr",
        "foreach_variable : array_short_syntax",
        "parameter_list : non_empty_parameter_list no_comma",
        "parameter_list : /* empty */",
        "non_empty_parameter_list : parameter",
        "non_empty_parameter_list : non_empty_parameter_list ',' parameter",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE",
        "parameter : optional_param_type optional_ref optional_ellipsis T_VARIABLE '=' expr",
        "type_expr : type",
        "type_expr : '?' type",
        "type : name",
        "type : T_ARRAY",
        "type : T_CALLABLE",
        "optional_param_type : /* empty */",
        "optional_param_type : type_expr",
        "optional_return_type : /* empty */",
        "optional_return_type : ':' type_expr",
        "argument_list : '(' ')'",
        "argument_list : '(' non_empty_argument_list no_comma ')'",
        "non_empty_argument_list : argument",
        "non_empty_argument_list : non_empty_argument_list ',' argument",
        "argument : expr",
        "argument : '&' variable",
        "argument : T_ELLIPSIS expr",
        "global_var_list : non_empty_global_var_list no_comma",
        "non_empty_global_var_list : non_empty_global_var_list ',' global_var",
        "non_empty_global_var_list : global_var",
        "global_var : simple_variable",
        "static_var_list : non_empty_static_var_list no_comma",
        "non_empty_static_var_list : non_empty_static_var_list ',' static_var",
        "non_empty_static_var_list : static_var",
        "static_var : T_VARIABLE",
        "static_var : T_VARIABLE '=' expr",
        "class_statement_list : class_statement_list class_statement",
        "class_statement_list : /* empty */",
        "class_statement : variable_modifiers property_declaration_list ';'",
        "class_statement : method_modifiers T_CONST class_const_list ';'",
        "class_statement : method_modifiers T_FUNCTION optional_ref identifier '(' parameter_list ')' optional_return_type method_body",
        "class_statement : T_USE class_name_list trait_adaptations",
        "trait_adaptations : ';'",
        "trait_adaptations : '{' trait_adaptation_list '}'",
        "trait_adaptation_list : /* empty */",
        "trait_adaptation_list : trait_adaptation_list trait_adaptation",
        "trait_adaptation : trait_method_reference_fully_qualified T_INSTEADOF class_name_list ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier identifier ';'",
        "trait_adaptation : trait_method_reference T_AS member_modifier ';'",
        "trait_adaptation : trait_method_reference T_AS T_STRING ';'",
        "trait_adaptation : trait_method_reference T_AS reserved_non_modifiers ';'",
        "trait_method_reference_fully_qualified : name T_PAAMAYIM_NEKUDOTAYIM identifier",
        "trait_method_reference : trait_method_reference_fully_qualified",
        "trait_method_reference : identifier",
        "method_body : ';'",
        "method_body : '{' inner_statement_list '}'",
        "variable_modifiers : non_empty_member_modifiers",
        "variable_modifiers : T_VAR",
        "method_modifiers : /* empty */",
        "method_modifiers : non_empty_member_modifiers",
        "non_empty_member_modifiers : member_modifier",
        "non_empty_member_modifiers : non_empty_member_modifiers member_modifier",
        "member_modifier : T_PUBLIC",
        "member_modifier : T_PROTECTED",
        "member_modifier : T_PRIVATE",
        "member_modifier : T_STATIC",
        "member_modifier : T_ABSTRACT",
        "member_modifier : T_FINAL",
        "property_declaration_list : non_empty_property_declaration_list no_comma",
        "non_empty_property_declaration_list : property_declaration",
        "non_empty_property_declaration_list : non_empty_property_declaration_list ',' property_declaration",
        "property_declaration : T_VARIABLE",
        "property_declaration : T_VARIABLE '=' expr",
        "expr_list : non_empty_expr_list no_comma",
        "non_empty_expr_list : non_empty_expr_list ',' expr",
        "non_empty_expr_list : expr",
        "for_expr : /* empty */",
        "for_expr : expr_list",
        "expr : variable",
        "expr : list_expr '=' expr",
        "expr : array_short_syntax '=' expr",
        "expr : variable '=' expr",
        "expr : variable '=' '&' variable",
        "expr : new_expr",
        "expr : T_CLONE expr",
        "expr : variable T_PLUS_EQUAL expr",
        "expr : variable T_MINUS_EQUAL expr",
        "expr : variable T_MUL_EQUAL expr",
        "expr : variable T_DIV_EQUAL expr",
        "expr : variable T_CONCAT_EQUAL expr",
        "expr : variable T_MOD_EQUAL expr",
        "expr : variable T_AND_EQUAL expr",
        "expr : variable T_OR_EQUAL expr",
        "expr : variable T_XOR_EQUAL expr",
        "expr : variable T_SL_EQUAL expr",
        "expr : variable T_SR_EQUAL expr",
        "expr : variable T_POW_EQUAL expr",
        "expr : variable T_INC",
        "expr : T_INC variable",
        "expr : variable T_DEC",
        "expr : T_DEC variable",
        "expr : expr T_BOOLEAN_OR expr",
        "expr : expr T_BOOLEAN_AND expr",
        "expr : expr T_LOGICAL_OR expr",
        "expr : expr T_LOGICAL_AND expr",
        "expr : expr T_LOGICAL_XOR expr",
        "expr : expr '|' expr",
        "expr : expr '&' expr",
        "expr : expr '^' expr",
        "expr : expr '.' expr",
        "expr : expr '+' expr",
        "expr : expr '-' expr",
        "expr : expr '*' expr",
        "expr : expr '/' expr",
        "expr : expr '%' expr",
        "expr : expr T_SL expr",
        "expr : expr T_SR expr",
        "expr : expr T_POW expr",
        "expr : '+' expr",
        "expr : '-' expr",
        "expr : '!' expr",
        "expr : '~' expr",
        "expr : expr T_IS_IDENTICAL expr",
        "expr : expr T_IS_NOT_IDENTICAL expr",
        "expr : expr T_IS_EQUAL expr",
        "expr : expr T_IS_NOT_EQUAL expr",
        "expr : expr T_SPACESHIP expr",
        "expr : expr '<' expr",
        "expr : expr T_IS_SMALLER_OR_EQUAL expr",
        "expr : expr '>' expr",
        "expr : expr T_IS_GREATER_OR_EQUAL expr",
        "expr : expr T_INSTANCEOF class_name_reference",
        "expr : '(' expr ')'",
        "expr : expr '?' expr ':' expr",
        "expr : expr '?' ':' expr",
        "expr : expr T_COALESCE expr",
        "expr : T_ISSET '(' variables_list ')'",
        "expr : T_EMPTY '(' expr ')'",
        "expr : T_INCLUDE expr",
        "expr : T_INCLUDE_ONCE expr",
        "expr : T_EVAL '(' expr ')'",
        "expr : T_REQUIRE expr",
        "expr : T_REQUIRE_ONCE expr",
        "expr : T_INT_CAST expr",
        "expr : T_DOUBLE_CAST expr",
        "expr : T_STRING_CAST expr",
        "expr : T_ARRAY_CAST expr",
        "expr : T_OBJECT_CAST expr",
        "expr : T_BOOL_CAST expr",
        "expr : T_UNSET_CAST expr",
        "expr : T_EXIT exit_expr",
        "expr : '@' expr",
        "expr : scalar",
        "expr : '`' backticks_expr '`'",
        "expr : T_PRINT expr",
        "expr : T_YIELD",
        "expr : T_YIELD expr",
        "expr : T_YIELD expr T_DOUBLE_ARROW expr",
        "expr : T_YIELD_FROM expr",
        "expr : T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "expr : T_STATIC T_FUNCTION optional_ref '(' parameter_list ')' lexical_vars optional_return_type '{' inner_statement_list '}'",
        "anonymous_class : T_CLASS ctor_arguments extends_from implements_list '{' class_statement_list '}'",
        "new_expr : T_NEW class_name_reference ctor_arguments",
        "new_expr : T_NEW anonymous_class",
        "lexical_vars : /* empty */",
        "lexical_vars : T_USE '(' lexical_var_list ')'",
        "lexical_var_list : non_empty_lexical_var_list no_comma",
        "non_empty_lexical_var_list : lexical_var",
        "non_empty_lexical_var_list : non_empty_lexical_var_list ',' lexical_var",
        "lexical_var : optional_ref T_VARIABLE",
        "function_call : name argument_list",
        "function_call : callable_expr argument_list",
        "function_call : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM member_name argument_list",
        "class_name : T_STATIC",
        "class_name : name",
        "name : namespace_name_parts",
        "name : T_NS_SEPARATOR namespace_name_parts",
        "name : T_NAMESPACE T_NS_SEPARATOR namespace_name_parts",
        "class_name_reference : class_name",
        "class_name_reference : new_variable",
        "class_name_reference : error",
        "class_name_or_var : class_name",
        "class_name_or_var : dereferencable",
        "exit_expr : /* empty */",
        "exit_expr : '(' optional_expr ')'",
        "backticks_expr : /* empty */",
        "backticks_expr : T_ENCAPSED_AND_WHITESPACE",
        "backticks_expr : encaps_list",
        "ctor_arguments : /* empty */",
        "ctor_arguments : argument_list",
        "constant : name",
        "constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM identifier",
        "constant : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM error",
        "array_short_syntax : '[' array_pair_list ']'",
        "dereferencable_scalar : T_ARRAY '(' array_pair_list ')'",
        "dereferencable_scalar : array_short_syntax",
        "dereferencable_scalar : T_CONSTANT_ENCAPSED_STRING",
        "scalar : T_LNUMBER",
        "scalar : T_DNUMBER",
        "scalar : T_LINE",
        "scalar : T_FILE",
        "scalar : T_DIR",
        "scalar : T_CLASS_C",
        "scalar : T_TRAIT_C",
        "scalar : T_METHOD_C",
        "scalar : T_FUNC_C",
        "scalar : T_NS_C",
        "scalar : dereferencable_scalar",
        "scalar : constant",
        "scalar : T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC",
        "scalar : T_START_HEREDOC T_END_HEREDOC",
        "scalar : '\"' encaps_list '\"'",
        "scalar : T_START_HEREDOC encaps_list T_END_HEREDOC",
        "optional_expr : /* empty */",
        "optional_expr : expr",
        "dereferencable : variable",
        "dereferencable : '(' expr ')'",
        "dereferencable : dereferencable_scalar",
        "callable_expr : callable_variable",
        "callable_expr : '(' expr ')'",
        "callable_expr : dereferencable_scalar",
        "callable_variable : simple_variable",
        "callable_variable : dereferencable '[' optional_expr ']'",
        "callable_variable : constant '[' optional_expr ']'",
        "callable_variable : dereferencable '{' expr '}'",
        "callable_variable : function_call",
        "callable_variable : dereferencable T_OBJECT_OPERATOR property_name argument_list",
        "variable : callable_variable",
        "variable : static_member",
        "variable : dereferencable T_OBJECT_OPERATOR property_name",
        "simple_variable : T_VARIABLE",
        "simple_variable : '$' '{' expr '}'",
        "simple_variable : '$' simple_variable",
        "simple_variable : '$' error",
        "static_member : class_name_or_var T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "new_variable : simple_variable",
        "new_variable : new_variable '[' optional_expr ']'",
        "new_variable : new_variable '{' expr '}'",
        "new_variable : new_variable T_OBJECT_OPERATOR property_name",
        "new_variable : class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "new_variable : new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable",
        "member_name : identifier",
        "member_name : '{' expr '}'",
        "member_name : simple_variable",
        "property_name : T_STRING",
        "property_name : '{' expr '}'",
        "property_name : simple_variable",
        "property_name : error",
        "list_expr : T_LIST '(' list_expr_elements ')'",
        "list_expr_elements : list_expr_elements ',' list_expr_element",
        "list_expr_elements : list_expr_element",
        "list_expr_element : variable",
        "list_expr_element : list_expr",
        "list_expr_element : expr T_DOUBLE_ARROW variable",
        "list_expr_element : expr T_DOUBLE_ARROW list_expr",
        "list_expr_element : /* empty */",
        "array_pair_list : inner_array_pair_list",
        "inner_array_pair_list : inner_array_pair_list ',' array_pair",
        "inner_array_pair_list : array_pair",
        "array_pair : expr T_DOUBLE_ARROW expr",
        "array_pair : expr",
        "array_pair : expr T_DOUBLE_ARROW '&' variable",
        "array_pair : '&' variable",
        "array_pair : /* empty */",
        "array_pair : T_ELLIPSIS expr",
        "encaps_list : encaps_list encaps_var",
        "encaps_list : encaps_list encaps_string_part",
        "encaps_list : encaps_var",
        "encaps_list : encaps_string_part encaps_var",
        "encaps_string_part : T_ENCAPSED_AND_WHITESPACE",
        "encaps_base_var : T_VARIABLE",
        "encaps_var : encaps_base_var",
        "encaps_var : encaps_base_var '[' encaps_var_offset ']'",
        "encaps_var : encaps_base_var T_OBJECT_OPERATOR T_STRING",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES expr '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'",
        "encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'",
        "encaps_var : T_CURLY_OPEN variable '}'",
        "encaps_var_offset : T_STRING",
        "encaps_var_offset : T_NUM_STRING",
        "encaps_var_offset : '-' T_NUM_STRING",
        "encaps_var_offset : T_VARIABLE"
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1() {
         $this->semValue = $this->handleNamespaces($this->stackPos-(1-1)); 
    }

    protected function reduceRule2() {
         pushNormalizing($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule3() {
         init(); 
    }

    protected function reduceRule4() {
         makeNop($nop, $this->lookaheadStartAttributes); if ($nop !== null) { $this->stackPos-(1-1)[] = $nop; } $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule5() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule6() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule7() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule8() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule9() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule10() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule11() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule12() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule13() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule14() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule15() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule16() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule17() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule18() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule19() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule20() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule21() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule22() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule23() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule24() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule25() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule26() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule27() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule28() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule29() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule30() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule31() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule32() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule33() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule34() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule35() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule36() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule37() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule38() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule39() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule40() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule41() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule42() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule43() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule44() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule45() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule46() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule47() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule48() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule49() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule50() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule51() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule52() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule53() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule54() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule55() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule56() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule57() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule58() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule59() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule60() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule61() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule62() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule63() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule64() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule65() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule66() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule67() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule68() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule69() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule70() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule71() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule72() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule73() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule74() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule75() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule76() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule77() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule78() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule79() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule80() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule81() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule82() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule83() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule84() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule85() {
         $this->semValue = Name[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule86() {
         /* nothing */ 
    }

    protected function reduceRule87() {
         /* nothing */ 
    }

    protected function reduceRule88() {
         /* nothing */ 
    }

    protected function reduceRule89() {
         $this->emitError(new Error('A trailing comma is not allowed here', attributes())); 
    }

    protected function reduceRule90() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule91() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule92() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule93() {
         $this->semValue = Stmt\HaltCompiler[$this->lexer->handleHaltCompiler()]; 
    }

    protected function reduceRule94() {
         $this->semValue = Stmt\Namespace_($this->stackPos-(3-2), null); $this->checkNamespace($this->semValue);
    }

    protected function reduceRule95() {
         $this->semValue = Stmt\Namespace_[$this->stackPos-(5-2), $this->stackPos-(5-4)]; $this->checkNamespace($this->semValue); 
    }

    protected function reduceRule96() {
         $this->semValue = Stmt\Namespace_[null, $this->stackPos-(4-3)]; $this->checkNamespace($this->semValue); 
    }

    protected function reduceRule97() {
         $this->semValue = Stmt\Use_[$this->stackPos-(3-2), Stmt\Use_::TYPE_NORMAL]; 
    }

    protected function reduceRule98() {
         $this->semValue = Stmt\Use_[$this->stackPos-(4-3), $this->stackPos-(4-2)]; 
    }

    protected function reduceRule99() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule100() {
         $this->semValue = Stmt\Const_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule101() {
         $this->semValue = Stmt\Use_::TYPE_FUNCTION; 
    }

    protected function reduceRule102() {
         $this->semValue = Stmt\Use_::TYPE_CONSTANT; 
    }

    protected function reduceRule103() {
         $this->semValue = Stmt\GroupUse[new Name($this->stackPos-(7-3), stackAttributes(#3)), $this->stackPos-(7-6), $this->stackPos-(7-2)]; 
    }

    protected function reduceRule104() {
         $this->semValue = Stmt\GroupUse[new Name($this->stackPos-(8-4), stackAttributes(#4)), $this->stackPos-(8-7), $this->stackPos-(8-2)]; 
    }

    protected function reduceRule105() {
         $this->semValue = Stmt\GroupUse[new Name($this->stackPos-(6-2), stackAttributes(#2)), $this->stackPos-(6-5), Stmt\Use_::TYPE_UNKNOWN]; 
    }

    protected function reduceRule106() {
         $this->semValue = Stmt\GroupUse[new Name($this->stackPos-(7-3), stackAttributes(#3)), $this->stackPos-(7-6), Stmt\Use_::TYPE_UNKNOWN]; 
    }

    protected function reduceRule107() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule108() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule109() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule110() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule111() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule112() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule113() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule114() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule115() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule116() {
         $this->semValue = Stmt\UseUse[$this->stackPos-(1-1), null, Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #1); 
    }

    protected function reduceRule117() {
         $this->semValue = Stmt\UseUse[$this->stackPos-(3-1), $this->stackPos-(3-3), Stmt\Use_::TYPE_UNKNOWN]; $this->checkUseUse($this->semValue, #3); 
    }

    protected function reduceRule118() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule119() {
         $this->semValue = $this->stackPos-(2-2); 
    }

    protected function reduceRule120() {
         $this->semValue = $this->stackPos-(1-1); $this->semValue->type = Stmt\Use_::TYPE_NORMAL; 
    }

    protected function reduceRule121() {
         $this->semValue = $this->stackPos-(2-2); $this->semValue->type = $this->stackPos-(2-1); 
    }

    protected function reduceRule122() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule123() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule124() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule125() {
         $this->semValue = Node\Const_[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule126() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule127() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule128() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule129() {
         $this->semValue = Node\Const_[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule130() {
         pushNormalizing($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule131() {
         init(); 
    }

    protected function reduceRule132() {
         makeNop($nop, $this->lookaheadStartAttributes); if ($nop !== null) { $this->stackPos-(1-1)[] = $nop; } $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule133() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule134() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule135() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule136() {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope', attributes()); 
    }

    protected function reduceRule137() {
         $this->semValue = $this->stackPos-(3-2); prependLeadingComments($this->semValue); 
    }

    protected function reduceRule138() {
         $this->semValue = Stmt\If_[$this->stackPos-(7-3), ['stmts' => toArray($this->stackPos-(7-5)), 'elseifs' => $this->stackPos-(7-6), 'else' => $this->stackPos-(7-7)]]; 
    }

    protected function reduceRule139() {
         $this->semValue = Stmt\If_[$this->stackPos-(10-3), ['stmts' => $this->stackPos-(10-6), 'elseifs' => $this->stackPos-(10-7), 'else' => $this->stackPos-(10-8)]]; 
    }

    protected function reduceRule140() {
         $this->semValue = Stmt\While_[$this->stackPos-(5-3), $this->stackPos-(5-5)]; 
    }

    protected function reduceRule141() {
         $this->semValue = Stmt\Do_ [$this->stackPos-(7-5), toArray($this->stackPos-(7-2))]; 
    }

    protected function reduceRule142() {
         $this->semValue = Stmt\For_[['init' => $this->stackPos-(9-3), 'cond' => $this->stackPos-(9-5), 'loop' => $this->stackPos-(9-7), 'stmts' => $this->stackPos-(9-9)]]; 
    }

    protected function reduceRule143() {
         $this->semValue = Stmt\Switch_[$this->stackPos-(5-3), $this->stackPos-(5-5)]; 
    }

    protected function reduceRule144() {
         $this->semValue = Stmt\Break_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule145() {
         $this->semValue = Stmt\Continue_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule146() {
         $this->semValue = Stmt\Return_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule147() {
         $this->semValue = Stmt\Global_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule148() {
         $this->semValue = Stmt\Static_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule149() {
         $this->semValue = Stmt\Echo_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule150() {
         $this->semValue = Stmt\InlineHTML[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule151() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule152() {
         $this->semValue = Stmt\Unset_[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule153() {
         $this->semValue = Stmt\Foreach_[$this->stackPos-(7-3), $this->stackPos-(7-5)[0], ['keyVar' => null, 'byRef' => $this->stackPos-(7-5)[1], 'stmts' => $this->stackPos-(7-7)]]; 
    }

    protected function reduceRule154() {
         $this->semValue = Stmt\Foreach_[$this->stackPos-(9-3), $this->stackPos-(9-7)[0], ['keyVar' => $this->stackPos-(9-5), 'byRef' => $this->stackPos-(9-7)[1], 'stmts' => $this->stackPos-(9-9)]]; 
    }

    protected function reduceRule155() {
         $this->semValue = Stmt\Declare_[$this->stackPos-(5-3), $this->stackPos-(5-5)]; 
    }

    protected function reduceRule156() {
         $this->semValue = Stmt\TryCatch[$this->stackPos-(6-3), $this->stackPos-(6-5), $this->stackPos-(6-6)]; $this->checkTryCatch($this->semValue); 
    }

    protected function reduceRule157() {
         $this->semValue = Stmt\Throw_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule158() {
         $this->semValue = Stmt\Goto_[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159() {
         $this->semValue = Stmt\Label[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule160() {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule161() {
         $this->semValue = \PhpParser\Node\Stmt\Foreach_[$this->stackPos-(7-5), $this->stackPos-(7-3)[0], ['keyVar' => null, 'byRef' => $this->stackPos-(7-3)[1], 'stmts' => $this->stackPos-(7-7)]]; 
    }

    protected function reduceRule162() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule163() {
         makeNop($this->semValue, $this->startAttributeStack[#1]); if ($this->semValue === null) $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule164() {
         init(); 
    }

    protected function reduceRule165() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule166() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule167() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule168() {
         $this->semValue = Stmt\Catch_[$this->stackPos-(8-3), parseVar($this->stackPos-(8-4)), $this->stackPos-(8-7)]; 
    }

    protected function reduceRule169() {
         $this->semValue = null; 
    }

    protected function reduceRule170() {
         $this->semValue = Stmt\Finally_[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule171() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule172() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule173() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule174() {
         $this->semValue = false; 
    }

    protected function reduceRule175() {
         $this->semValue = true; 
    }

    protected function reduceRule176() {
         $this->semValue = false; 
    }

    protected function reduceRule177() {
         $this->semValue = true; 
    }

    protected function reduceRule178() {
         $this->semValue = Stmt\Function_[$this->stackPos-(10-3), ['byRef' => $this->stackPos-(10-2), 'params' => $this->stackPos-(10-5), 'returnType' => $this->stackPos-(10-7), 'stmts' => $this->stackPos-(10-9)]]; 
    }

    protected function reduceRule179() {
         $this->semValue = Stmt\Class_[$this->stackPos-(7-2), ['type' => $this->stackPos-(7-1), 'extends' => $this->stackPos-(7-3), 'implements' => $this->stackPos-(7-4), 'stmts' => $this->stackPos-(7-6)]]; $this->checkClass($this->semValue, #2); 
    }

    protected function reduceRule180() {
         $this->semValue = Stmt\Interface_[$this->stackPos-(6-2), ['extends' => $this->stackPos-(6-3), 'stmts' => $this->stackPos-(6-5)]]; $this->checkInterface($this->semValue, #2); 
    }

    protected function reduceRule181() {
         $this->semValue = Stmt\Trait_[$this->stackPos-(5-2), ['stmts' => $this->stackPos-(5-4)]]; 
    }

    protected function reduceRule182() {
         $this->semValue = 0; 
    }

    protected function reduceRule183() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule184() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule185() {
         $this->semValue = null; 
    }

    protected function reduceRule186() {
         $this->semValue = $this->stackPos-(2-2); 
    }

    protected function reduceRule187() {
         $this->semValue = array(); 
    }

    protected function reduceRule188() {
         $this->semValue = $this->stackPos-(2-2); 
    }

    protected function reduceRule189() {
         $this->semValue = array(); 
    }

    protected function reduceRule190() {
         $this->semValue = $this->stackPos-(2-2); 
    }

    protected function reduceRule191() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule192() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule193() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule194() {
         $this->semValue = toArray($this->stackPos-(1-1)); 
    }

    protected function reduceRule195() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule196() {
         $this->semValue = toArray($this->stackPos-(1-1)); 
    }

    protected function reduceRule197() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule198() {
         $this->semValue = toArray($this->stackPos-(1-1)); 
    }

    protected function reduceRule199() {
         $this->semValue = null; 
    }

    protected function reduceRule200() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule201() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule202() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule203() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule204() {
         $this->semValue = Stmt\DeclareDeclare[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule205() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule206() {
         $this->semValue = $this->stackPos-(4-3); 
    }

    protected function reduceRule207() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule208() {
         $this->semValue = $this->stackPos-(5-3); 
    }

    protected function reduceRule209() {
         init(); 
    }

    protected function reduceRule210() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule211() {
         $this->semValue = Stmt\Case_[$this->stackPos-(4-2), $this->stackPos-(4-4)]; 
    }

    protected function reduceRule212() {
         $this->semValue = Stmt\Case_[null, $this->stackPos-(3-3)]; 
    }

    protected function reduceRule213() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule214() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule215() {
         $this->semValue = toArray($this->stackPos-(1-1)); 
    }

    protected function reduceRule216() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule217() {
         init(); 
    }

    protected function reduceRule218() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule219() {
         $this->semValue = Stmt\ElseIf_[$this->stackPos-(5-3), toArray($this->stackPos-(5-5))]; 
    }

    protected function reduceRule220() {
         init(); 
    }

    protected function reduceRule221() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule222() {
         $this->semValue = Stmt\ElseIf_[$this->stackPos-(6-3), $this->stackPos-(6-6)]; 
    }

    protected function reduceRule223() {
         $this->semValue = null; 
    }

    protected function reduceRule224() {
         $this->semValue = Stmt\Else_[toArray($this->stackPos-(2-2))]; 
    }

    protected function reduceRule225() {
         $this->semValue = null; 
    }

    protected function reduceRule226() {
         $this->semValue = Stmt\Else_[$this->stackPos-(3-3)]; 
    }

    protected function reduceRule227() {
         $this->semValue = array($this->stackPos-(1-1), false); 
    }

    protected function reduceRule228() {
         $this->semValue = array($this->stackPos-(2-2), true); 
    }

    protected function reduceRule229() {
         $this->semValue = array($this->stackPos-(1-1), false); 
    }

    protected function reduceRule230() {
         $this->semValue = array($this->stackPos-(1-1), false); 
    }

    protected function reduceRule231() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule232() {
         $this->semValue = array(); 
    }

    protected function reduceRule233() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule234() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule235() {
         $this->semValue = Node\Param[parseVar($this->stackPos-(4-4)), null, $this->stackPos-(4-1), $this->stackPos-(4-2), $this->stackPos-(4-3)]; $this->checkParam($this->semValue); 
    }

    protected function reduceRule236() {
         $this->semValue = Node\Param[parseVar($this->stackPos-(6-4)), $this->stackPos-(6-6), $this->stackPos-(6-1), $this->stackPos-(6-2), $this->stackPos-(6-3)]; $this->checkParam($this->semValue); 
    }

    protected function reduceRule237() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule238() {
         $this->semValue = Node\NullableType[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule239() {
         $this->semValue = $this->handleBuiltinTypes($this->stackPos-(1-1)); 
    }

    protected function reduceRule240() {
         $this->semValue = 'array'; 
    }

    protected function reduceRule241() {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule242() {
         $this->semValue = null; 
    }

    protected function reduceRule243() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule244() {
         $this->semValue = null; 
    }

    protected function reduceRule245() {
         $this->semValue = $this->stackPos-(2-2); 
    }

    protected function reduceRule246() {
         $this->semValue = array(); 
    }

    protected function reduceRule247() {
         $this->semValue = $this->stackPos-(4-2); 
    }

    protected function reduceRule248() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule249() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule250() {
         $this->semValue = Node\Arg[$this->stackPos-(1-1), false, false]; 
    }

    protected function reduceRule251() {
         $this->semValue = Node\Arg[$this->stackPos-(2-2), true, false]; 
    }

    protected function reduceRule252() {
         $this->semValue = Node\Arg[$this->stackPos-(2-2), false, true]; 
    }

    protected function reduceRule253() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule254() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule255() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule256() {
         $this->semValue = Expr\Variable[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule257() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule258() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule259() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule260() {
         $this->semValue = Stmt\StaticVar[parseVar($this->stackPos-(1-1)), null]; 
    }

    protected function reduceRule261() {
         $this->semValue = Stmt\StaticVar[parseVar($this->stackPos-(3-1)), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule262() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule263() {
         init(); 
    }

    protected function reduceRule264() {
         $this->semValue = Stmt\Property[$this->stackPos-(3-1), $this->stackPos-(3-2)]; $this->checkProperty($this->semValue, #1); 
    }

    protected function reduceRule265() {
         $this->semValue = Stmt\ClassConst[$this->stackPos-(4-3), $this->stackPos-(4-1)]; $this->checkClassConst($this->semValue, #1); 
    }

    protected function reduceRule266() {
         $this->semValue = Stmt\ClassMethod[$this->stackPos-(9-4), ['type' => $this->stackPos-(9-1), 'byRef' => $this->stackPos-(9-3), 'params' => $this->stackPos-(9-6), 'returnType' => $this->stackPos-(9-8), 'stmts' => $this->stackPos-(9-9)]]; $this->checkClassMethod($this->semValue, #1); 
    }

    protected function reduceRule267() {
         $this->semValue = Stmt\TraitUse[$this->stackPos-(3-2), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule268() {
         $this->semValue = array(); 
    }

    protected function reduceRule269() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule270() {
         init(); 
    }

    protected function reduceRule271() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule272() {
         $this->semValue = Stmt\TraitUseAdaptation\Precedence[$this->stackPos-(4-1)[0], $this->stackPos-(4-1)[1], $this->stackPos-(4-3)]; 
    }

    protected function reduceRule273() {
         $this->semValue = Stmt\TraitUseAdaptation\Alias[$this->stackPos-(5-1)[0], $this->stackPos-(5-1)[1], $this->stackPos-(5-3), $this->stackPos-(5-4)]; 
    }

    protected function reduceRule274() {
         $this->semValue = Stmt\TraitUseAdaptation\Alias[$this->stackPos-(4-1)[0], $this->stackPos-(4-1)[1], $this->stackPos-(4-3), null]; 
    }

    protected function reduceRule275() {
         $this->semValue = Stmt\TraitUseAdaptation\Alias[$this->stackPos-(4-1)[0], $this->stackPos-(4-1)[1], null, $this->stackPos-(4-3)]; 
    }

    protected function reduceRule276() {
         $this->semValue = Stmt\TraitUseAdaptation\Alias[$this->stackPos-(4-1)[0], $this->stackPos-(4-1)[1], null, $this->stackPos-(4-3)]; 
    }

    protected function reduceRule277() {
         $this->semValue = array($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule278() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule279() {
         $this->semValue = array(null, $this->stackPos-(1-1)); 
    }

    protected function reduceRule280() {
         $this->semValue = null; 
    }

    protected function reduceRule281() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule282() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule283() {
         $this->semValue = 0; 
    }

    protected function reduceRule284() {
         $this->semValue = 0; 
    }

    protected function reduceRule285() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule286() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule287() {
         $this->checkModifier($this->stackPos-(2-1), $this->stackPos-(2-2), #2); $this->semValue = $this->stackPos-(2-1) | $this->stackPos-(2-2); 
    }

    protected function reduceRule288() {
         $this->semValue = Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule289() {
         $this->semValue = Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule290() {
         $this->semValue = Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule291() {
         $this->semValue = Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule292() {
         $this->semValue = Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule293() {
         $this->semValue = Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule294() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule295() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule296() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule297() {
         $this->semValue = Stmt\PropertyProperty[parseVar($this->stackPos-(1-1)), null]; 
    }

    protected function reduceRule298() {
         $this->semValue = Stmt\PropertyProperty[parseVar($this->stackPos-(3-1)), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule299() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule300() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule301() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule302() {
         $this->semValue = array(); 
    }

    protected function reduceRule303() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule304() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule305() {
         $this->semValue = Expr\Assign[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule306() {
         $this->semValue = Expr\Assign[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule307() {
         $this->semValue = Expr\Assign[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule308() {
         $this->semValue = Expr\AssignRef[$this->stackPos-(4-1), $this->stackPos-(4-4)]; 
    }

    protected function reduceRule309() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule310() {
         $this->semValue = Expr\Clone_[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule311() {
         $this->semValue = Expr\AssignOp\Plus [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule312() {
         $this->semValue = Expr\AssignOp\Minus [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule313() {
         $this->semValue = Expr\AssignOp\Mul [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule314() {
         $this->semValue = Expr\AssignOp\Div [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule315() {
         $this->semValue = Expr\AssignOp\Concat [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule316() {
         $this->semValue = Expr\AssignOp\Mod [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule317() {
         $this->semValue = Expr\AssignOp\BitwiseAnd[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule318() {
         $this->semValue = Expr\AssignOp\BitwiseOr [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule319() {
         $this->semValue = Expr\AssignOp\BitwiseXor[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule320() {
         $this->semValue = Expr\AssignOp\ShiftLeft [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule321() {
         $this->semValue = Expr\AssignOp\ShiftRight[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule322() {
         $this->semValue = Expr\AssignOp\Pow [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule323() {
         $this->semValue = Expr\PostInc[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule324() {
         $this->semValue = Expr\PreInc [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule325() {
         $this->semValue = Expr\PostDec[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule326() {
         $this->semValue = Expr\PreDec [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule327() {
         $this->semValue = Expr\BinaryOp\BooleanOr [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule328() {
         $this->semValue = Expr\BinaryOp\BooleanAnd[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule329() {
         $this->semValue = Expr\BinaryOp\LogicalOr [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule330() {
         $this->semValue = Expr\BinaryOp\LogicalAnd[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule331() {
         $this->semValue = Expr\BinaryOp\LogicalXor[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule332() {
         $this->semValue = Expr\BinaryOp\BitwiseOr [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule333() {
         $this->semValue = Expr\BinaryOp\BitwiseAnd[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule334() {
         $this->semValue = Expr\BinaryOp\BitwiseXor[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule335() {
         $this->semValue = Expr\BinaryOp\Concat [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule336() {
         $this->semValue = Expr\BinaryOp\Plus [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule337() {
         $this->semValue = Expr\BinaryOp\Minus [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule338() {
         $this->semValue = Expr\BinaryOp\Mul [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule339() {
         $this->semValue = Expr\BinaryOp\Div [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule340() {
         $this->semValue = Expr\BinaryOp\Mod [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule341() {
         $this->semValue = Expr\BinaryOp\ShiftLeft [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule342() {
         $this->semValue = Expr\BinaryOp\ShiftRight[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule343() {
         $this->semValue = Expr\BinaryOp\Pow [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule344() {
         $this->semValue = Expr\UnaryPlus [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule345() {
         $this->semValue = Expr\UnaryMinus[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule346() {
         $this->semValue = Expr\BooleanNot[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule347() {
         $this->semValue = Expr\BitwiseNot[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule348() {
         $this->semValue = Expr\BinaryOp\Identical [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule349() {
         $this->semValue = Expr\BinaryOp\NotIdentical [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule350() {
         $this->semValue = Expr\BinaryOp\Equal [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule351() {
         $this->semValue = Expr\BinaryOp\NotEqual [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule352() {
         $this->semValue = Expr\BinaryOp\Spaceship [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule353() {
         $this->semValue = Expr\BinaryOp\Smaller [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule354() {
         $this->semValue = Expr\BinaryOp\SmallerOrEqual[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule355() {
         $this->semValue = Expr\BinaryOp\Greater [$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule356() {
         $this->semValue = Expr\BinaryOp\GreaterOrEqual[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule357() {
         $this->semValue = Expr\Instanceof_[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule358() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule359() {
         $this->semValue = Expr\Ternary[$this->stackPos-(5-1), $this->stackPos-(5-3), $this->stackPos-(5-5)]; 
    }

    protected function reduceRule360() {
         $this->semValue = Expr\Ternary[$this->stackPos-(4-1), null, $this->stackPos-(4-4)]; 
    }

    protected function reduceRule361() {
         $this->semValue = Expr\BinaryOp\Coalesce[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule362() {
         $this->semValue = Expr\Isset_[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule363() {
         $this->semValue = Expr\Empty_[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule364() {
         $this->semValue = Expr\Include_[$this->stackPos-(2-2), Expr\Include_::TYPE_INCLUDE]; 
    }

    protected function reduceRule365() {
         $this->semValue = Expr\Include_[$this->stackPos-(2-2), Expr\Include_::TYPE_INCLUDE_ONCE]; 
    }

    protected function reduceRule366() {
         $this->semValue = Expr\Eval_[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule367() {
         $this->semValue = Expr\Include_[$this->stackPos-(2-2), Expr\Include_::TYPE_REQUIRE]; 
    }

    protected function reduceRule368() {
         $this->semValue = Expr\Include_[$this->stackPos-(2-2), Expr\Include_::TYPE_REQUIRE_ONCE]; 
    }

    protected function reduceRule369() {
         $this->semValue = Expr\Cast\Int_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule370() {
         $this->semValue = Expr\Cast\Double [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule371() {
         $this->semValue = Expr\Cast\String_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule372() {
         $this->semValue = Expr\Cast\Array_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule373() {
         $this->semValue = Expr\Cast\Object_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule374() {
         $this->semValue = Expr\Cast\Bool_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule375() {
         $this->semValue = Expr\Cast\Unset_ [$this->stackPos-(2-2)]; 
    }

    protected function reduceRule376() {
         $attrs = attributes(); $attrs['kind'] = strtolower($this->stackPos-(2-1)) === 'exit' ? Expr\Exit_::KIND_EXIT : Expr\Exit_::KIND_DIE; $this->semValue = new Expr\Exit_($this->stackPos-(2-2), $attrs); 
    }

    protected function reduceRule377() {
         $this->semValue = Expr\ErrorSuppress[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule378() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule379() {
         $this->semValue = Expr\ShellExec[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule380() {
         $this->semValue = Expr\Print_[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule381() {
         $this->semValue = Expr\Yield_[null, null]; 
    }

    protected function reduceRule382() {
         $this->semValue = Expr\Yield_[$this->stackPos-(2-2), null]; 
    }

    protected function reduceRule383() {
         $this->semValue = Expr\Yield_[$this->stackPos-(4-4), $this->stackPos-(4-2)]; 
    }

    protected function reduceRule384() {
         $this->semValue = Expr\YieldFrom[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule385() {
         $this->semValue = Expr\Closure[['static' => false, 'byRef' => $this->stackPos-(10-2), 'params' => $this->stackPos-(10-4), 'uses' => $this->stackPos-(10-6), 'returnType' => $this->stackPos-(10-7), 'stmts' => $this->stackPos-(10-9)]]; 
    }

    protected function reduceRule386() {
         $this->semValue = Expr\Closure[['static' => true, 'byRef' => $this->stackPos-(11-3), 'params' => $this->stackPos-(11-5), 'uses' => $this->stackPos-(11-7), 'returnType' => $this->stackPos-(11-8), 'stmts' => $this->stackPos-(11-10)]]; 
    }

    protected function reduceRule387() {
         $this->semValue = array(Stmt\Class_[null, ['type' => 0, 'extends' => $this->stackPos-(7-3), 'implements' => $this->stackPos-(7-4), 'stmts' => $this->stackPos-(7-6)]], $this->stackPos-(7-2)); $this->checkClass($this->semValue[0], -1); 
    }

    protected function reduceRule388() {
         $this->semValue = Expr\New_[$this->stackPos-(3-2), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule389() {
         list($class, $ctorArgs) = $this->stackPos-(2-2); $this->semValue = Expr\New_[$class, $ctorArgs]; 
    }

    protected function reduceRule390() {
         $this->semValue = array(); 
    }

    protected function reduceRule391() {
         $this->semValue = $this->stackPos-(4-3); 
    }

    protected function reduceRule392() {
         $this->semValue = $this->stackPos-(2-1); 
    }

    protected function reduceRule393() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule394() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule395() {
         $this->semValue = Expr\ClosureUse[parseVar($this->stackPos-(2-2)), $this->stackPos-(2-1)]; 
    }

    protected function reduceRule396() {
         $this->semValue = Expr\FuncCall[$this->stackPos-(2-1), $this->stackPos-(2-2)]; 
    }

    protected function reduceRule397() {
         $this->semValue = Expr\FuncCall[$this->stackPos-(2-1), $this->stackPos-(2-2)]; 
    }

    protected function reduceRule398() {
         $this->semValue = Expr\StaticCall[$this->stackPos-(4-1), $this->stackPos-(4-3), $this->stackPos-(4-4)]; 
    }

    protected function reduceRule399() {
         $this->semValue = Name[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule400() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule401() {
         $this->semValue = Name[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule402() {
         $this->semValue = Name\FullyQualified[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule403() {
         $this->semValue = Name\Relative[$this->stackPos-(3-3)]; 
    }

    protected function reduceRule404() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule405() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule406() {
         $this->semValue = Expr\Error[]; $this->errorState = 2; 
    }

    protected function reduceRule407() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule408() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule409() {
         $this->semValue = null; 
    }

    protected function reduceRule410() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule411() {
         $this->semValue = array(); 
    }

    protected function reduceRule412() {
         $this->semValue = array(Scalar\EncapsedStringPart[Scalar\String_::parseEscapeSequences($this->stackPos-(1-1), '`')]); 
    }

    protected function reduceRule413() {
         parseEncapsed($this->stackPos-(1-1), '`', true); $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule414() {
         $this->semValue = array(); 
    }

    protected function reduceRule415() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule416() {
         $this->semValue = Expr\ConstFetch[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule417() {
         $this->semValue = Expr\ClassConstFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule418() {
         $this->semValue = Expr\ClassConstFetch[$this->stackPos-(3-1), new Expr\Error(stackAttributes(#3))]; $this->errorState = 2; 
    }

    protected function reduceRule419() {
         $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_SHORT; $this->semValue = new Expr\Array_($this->stackPos-(3-2), $attrs); 
    }

    protected function reduceRule420() {
         $attrs = attributes(); $attrs['kind'] = Expr\Array_::KIND_LONG; $this->semValue = new Expr\Array_($this->stackPos-(4-3), $attrs); 
    }

    protected function reduceRule421() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule422() {
         $attrs = attributes(); $attrs['kind'] = strKind($this->stackPos-(1-1)); $this->semValue = new Scalar\String_(Scalar\String_::parse($this->stackPos-(1-1)), $attrs); 
    }

    protected function reduceRule423() {
         $this->semValue = $this->parseLNumber($this->stackPos-(1-1), attributes()); 
    }

    protected function reduceRule424() {
         $this->semValue = Scalar\DNumber[Scalar\DNumber::parse($this->stackPos-(1-1))]; 
    }

    protected function reduceRule425() {
         $this->semValue = Scalar\MagicConst\Line[]; 
    }

    protected function reduceRule426() {
         $this->semValue = Scalar\MagicConst\File[]; 
    }

    protected function reduceRule427() {
         $this->semValue = Scalar\MagicConst\Dir[]; 
    }

    protected function reduceRule428() {
         $this->semValue = Scalar\MagicConst\Class_[]; 
    }

    protected function reduceRule429() {
         $this->semValue = Scalar\MagicConst\Trait_[]; 
    }

    protected function reduceRule430() {
         $this->semValue = Scalar\MagicConst\Method[]; 
    }

    protected function reduceRule431() {
         $this->semValue = Scalar\MagicConst\Function_[]; 
    }

    protected function reduceRule432() {
         $this->semValue = Scalar\MagicConst\Namespace_[]; 
    }

    protected function reduceRule433() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule434() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule435() {
         $attrs = attributes(); setDocStringAttrs($attrs, $this->stackPos-(3-1)); $this->semValue = new Scalar\String_(Scalar\String_::parseDocString($this->stackPos-(3-1), $this->stackPos-(3-2)), $attrs); 
    }

    protected function reduceRule436() {
         $attrs = attributes(); setDocStringAttrs($attrs, $this->stackPos-(2-1)); $this->semValue = new Scalar\String_('', $attrs); 
    }

    protected function reduceRule437() {
         $attrs = attributes(); $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED; parseEncapsed($this->stackPos-(3-2), '"', true); $this->semValue = new Scalar\Encapsed($this->stackPos-(3-2), $attrs); 
    }

    protected function reduceRule438() {
         $attrs = attributes(); setDocStringAttrs($attrs, $this->stackPos-(3-1)); parseEncapsedDoc($this->stackPos-(3-2), true); $this->semValue = new Scalar\Encapsed($this->stackPos-(3-2), $attrs); 
    }

    protected function reduceRule439() {
         $this->semValue = null; 
    }

    protected function reduceRule440() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule441() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule442() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule443() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule444() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule445() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule446() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule447() {
         $this->semValue = Expr\Variable[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule448() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule449() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule450() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule451() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule452() {
         $this->semValue = Expr\MethodCall[$this->stackPos-(4-1), $this->stackPos-(4-3), $this->stackPos-(4-4)]; 
    }

    protected function reduceRule453() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule454() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule455() {
         $this->semValue = Expr\PropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule456() {
         $this->semValue = parseVar($this->stackPos-(1-1)); 
    }

    protected function reduceRule457() {
         $this->semValue = $this->stackPos-(4-3); 
    }

    protected function reduceRule458() {
         $this->semValue = Expr\Variable[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule459() {
         $this->semValue = Expr\Error[]; $this->errorState = 2; 
    }

    protected function reduceRule460() {
         $this->semValue = Expr\StaticPropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule461() {
         $this->semValue = Expr\Variable[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule462() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule463() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule464() {
         $this->semValue = Expr\PropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule465() {
         $this->semValue = Expr\StaticPropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule466() {
         $this->semValue = Expr\StaticPropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule467() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule468() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule469() {
         $this->semValue = Expr\Variable[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule470() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule471() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule472() {
         $this->semValue = Expr\Variable[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule473() {
         $this->semValue = Expr\Error[]; $this->errorState = 2; 
    }

    protected function reduceRule474() {
         $this->semValue = Expr\List_[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule475() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule476() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule477() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(1-1), null, false]; 
    }

    protected function reduceRule478() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(1-1), null, false]; 
    }

    protected function reduceRule479() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(3-3), $this->stackPos-(3-1), false]; 
    }

    protected function reduceRule480() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(3-3), $this->stackPos-(3-1), false]; 
    }

    protected function reduceRule481() {
         $this->semValue = null; 
    }

    protected function reduceRule482() {
         $this->semValue = $this->stackPos-(1-1); $end = count($this->semValue)-1; if ($this->semValue[$end] === null) unset($this->semValue[$end]); 
    }

    protected function reduceRule483() {
         push($this->stackPos-(3-1), $this->stackPos-(3-3)); 
    }

    protected function reduceRule484() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule485() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(3-3), $this->stackPos-(3-1), false]; 
    }

    protected function reduceRule486() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(1-1), null, false]; 
    }

    protected function reduceRule487() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(4-4), $this->stackPos-(4-1), true]; 
    }

    protected function reduceRule488() {
         $this->semValue = Expr\ArrayItem[$this->stackPos-(2-2), null, true]; 
    }

    protected function reduceRule489() {
         $this->semValue = null; 
    }

    protected function reduceRule490() {
         $this->semValue = \Phx\Parser\Node\Expr\UnpackArrayItem[$this->stackPos-(2-2), null, false]; 
    }

    protected function reduceRule491() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule492() {
         push($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule493() {
         init($this->stackPos-(1-1)); 
    }

    protected function reduceRule494() {
         init($this->stackPos-(2-1), $this->stackPos-(2-2)); 
    }

    protected function reduceRule495() {
         $this->semValue = Scalar\EncapsedStringPart[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule496() {
         $this->semValue = Expr\Variable[parseVar($this->stackPos-(1-1))]; 
    }

    protected function reduceRule497() {
         $this->semValue = $this->stackPos-(1-1); 
    }

    protected function reduceRule498() {
         $this->semValue = Expr\ArrayDimFetch[$this->stackPos-(4-1), $this->stackPos-(4-3)]; 
    }

    protected function reduceRule499() {
         $this->semValue = Expr\PropertyFetch[$this->stackPos-(3-1), $this->stackPos-(3-3)]; 
    }

    protected function reduceRule500() {
         $this->semValue = Expr\Variable[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule501() {
         $this->semValue = Expr\Variable[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule502() {
         $this->semValue = Expr\ArrayDimFetch[Expr\Variable[$this->stackPos-(6-2)], $this->stackPos-(6-4)]; 
    }

    protected function reduceRule503() {
         $this->semValue = $this->stackPos-(3-2); 
    }

    protected function reduceRule504() {
         $this->semValue = Scalar\String_[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule505() {
         $this->semValue = $this->parseNumString($this->stackPos-(1-1), attributes()); 
    }

    protected function reduceRule506() {
         $this->semValue = $this->parseNumString('-' . $this->stackPos-(2-2), attributes()); 
    }

    protected function reduceRule507() {
         $this->semValue = Expr\Variable[parseVar($this->stackPos-(1-1))]; 
    }
}

